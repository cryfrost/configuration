<%@ page language="java" contentType="text/html; charset=utf-8"
    pageEncoding="utf-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>Insert title here</title>
<!-- 引入bootstrap样式 -->
<link href="<%=request.getContextPath()%>/bootstrap/css/bootstrap.min.css" rel="stylesheet">
<!-- 引入bootstrap-table样式 -->
<link href="<%=request.getContextPath()%>/bootstrap/css/bootstrap-table.min.css" rel="stylesheet">
<!-- jquery -->
<script src="<%=request.getContextPath()%>/js/jquery-3.3.1.min.js"></script>
<script src="<%=request.getContextPath()%>/bootstrap/js/bootstrap.min.js"></script>
<!-- bootstrap-table.min.js -->
<script src="<%=request.getContextPath()%>/bootstrap/js/bootstrap-table.min.js"></script>
<!-- 引入中文语言包 -->
<script src="<%=request.getContextPath()%>/bootstrap/js/bootstrap-table-zh-CN.min.js"></script>
<!-- excel输出相关的js -->
<script src="<%=request.getContextPath()%>/bootstrap/js/bootstrap-table-export.js"></script>
<script src="<%=request.getContextPath()%>/bootstrap/js/FileSaver.min.js"></script>
<script src="<%=request.getContextPath()%>/bootstrap/js/tableExport.min.js"></script>
<script src="<%=request.getContextPath()%>/bootstrap/js/xlsx.core.min.js"></script>
<script type="text/javascript">
function edit(id10001){
	location.href="showUpdateUser.do?id10001="+id10001
}
$(function() {							
	$("#with_appr_shuju").change(function () { 						
		// ’、刷新参数设置 ，指向选择下拉框					
		$("#tableL01").bootstrapTable('refreshOptions', { 					
			exportDataType: $(this).val()				
			}); 				
		});					
})
function tableInit(){
	$('#tableL01').bootstrapTable('destroy');
	$('#tableL01').bootstrapTable({
		// ’请求地址
		url: 'listUser.do', 
		// ’请求方式
		method:'post',
		dataType:"json",
		// ’请求内容类型
		contentType: "application/x-www-form-urlencoded",
		// ’表格高度
		height:'700',
		// ’是否显示行间隔色
		striped:true,
		// ’是否启用排序
		sortable: true,
		// ’默认排序id
		sortName : 'id10001',
		// ’默认排序方式
		sortOrder: "asc",
		// ’是否使用缓存，默认为true，所以一般情况下需要设置一下这个属性（*）
		cache: false,
		// ’每一行的唯一标识，一般为主键列
		uniqueId: "id10001",
        // ’工具按钮用哪个容器
		toolbar: '#toolbar',
		// ’是否显示所有的列
		showColumns: true, 
        // ’是否显示刷新按钮
		showRefresh: true,
		// ’是否显示详细视图和列表视图的切换按钮
		showToggle: true, 
		// ’是否显示详细视图
		cardView: false, 
		// ’是否显示父子表
		detailView: true, 
		// ’是否显示分页（*）
		 pagination: true,  
		 // ’显示隐藏分页按钮
		 showPaginationSwitch:true,
		 //  ’是否启用点击选中行
		 clickToSelect:false,
		 // ’表格行单选
		 singleSelect:false,
		 // ’最小显示行数
		 minimumCountColumns:2,
		 // ’未查到数据时显示
		 undefinedText:'-',
		 // ’分页方式
		 sidePagination:'server',
		 // ’分页循环
		 paginationLoop: false,	
		 // ’默认每页显示条数
		 pageSize:20,
		 // ’默认在第几页
		 pageNumber:1,
		 // ’选择每页条数
		 pageList:"[10,20,50]",
		 // ’很重要，这是后端返回的实体数据！
		 dataField : "rows",
		 paginationPreText: "<<",
         paginationNextText: ">>",
         queryParams : function(params) {// ’自定义参数，这里的参数是传给后台的，我这是是分页用的  
				return {// ’这里的params是table提供的  
					offset : params.offset,// ’从数据库第几条记录开始  
					limit : params.limit,   // ’找多少条  
					na10001:$("#name").val(),
					 sort: params.sort,      // ’排序列名  
                     sortOrder: params.order // ’排位命令（desc，asc） 
				};
			},
			responseHandler : function(res) {
				// ’在ajax获取到数据，渲染表格之前，修改数据源
				return res;
			},
			// ’父子表
		      onExpandRow: function (index, rows, $detail){				
		     	 console.log(rows.id10001);			
		     	 InitSubTable(index, rows, $detail);			
		      },
		 columns: [
			       {	 	
					   checkbox: true,	
				       align: 'center',	
				       valign: 'middle',	
				       width:'50px',
				            },		

				     {
				    	field:'Number',
				    	title:'序号',
				    	width:'100px',
				    	 formatter: function (value, row, index) {
		                        return '<span class="badge">'+(index+1)+'</span>'
		                    }
				    	
				     },
			         {
			            field:'id10001',
			            title: '用户编号',
			            sortable : true, // ’是否允许单击对应表头排序
			            align : 'center',
			            width:'200px'
			            
			         }, {
			            field:'na10001',
			            title: '姓名',
			            sortable : true,
			            align : 'center',
			            width:'200px'
			             },
			         {
				            field:'na10003',
				            title: '所在部门',
				            sortable : true, 
				            width:'200px'
				             },
			         {
				            field: 'na10004',
				            title: '职务',
				            sortable : true, 
				            width:'200px'
				             },
			         {
				            field: 'na10005',
				            title: '联系地址',
				            sortable : true,
				            width:'500px'
				             },
				              {
									title : '操作',
									
									align : 'center',
									width:'100px',
									formatter : function(value, row, index) {
										var e = '<a href="#" mce_href="#" onclick="edit(\''
											+ row.id10001 + '\')">编辑</a> '
										
										return e;
									}
				              }
			      ],
		      onLoadSuccess: function(){  // ’加载成功时执行
		    	  console.info("加载成功");
		      },
		      onLoadError: function(){  // ’加载失败时执行
		          console.info("加载数据失败");
		      },
		    //>>>>>>>>>>>>>>导出excel表格设置
		      showExport: true,              // ’是否显示导出按钮
		      exportDataType: "basic",           //basic', 'all', 'selected'.
		      exportTypes:['excel','xlsx'],	    // ’导出类型
		      //exportButton: $('#btn_export'),     // ’为按钮btn_export  绑定导出事件  自定义导出按钮(可以不用)
		      exportOptions:{  
		          //ignoreColumn: [0,0],            // ’忽略某一列的索引  
		          fileName: '数据导出',              // ’文件名称设置  
		          worksheetName: 'Sheet1',          // ’表格工作区名称  
		          tableName: '商品数据表',  
		          excelstyles: ['background-color', 'color', 'font-size', 'font-weight'],  
		          //onMsoNumberFormat: DoOnMsoNumberFormat  
		      }
		      //导出excel表格设置<<<<<<<<<<<<<<<< 	     
	})
	

}

function rowStyle(row, index) {
    if (index%2==0) {
        return {
            classes:['success']
        }
    };
    return {};
}
// ’父子表						
InitSubTable = function (index, row, $detail) {  						
	var cur_table = $detail.html('<table></table>').find('table');					
	$(cur_table).bootstrapTable({					
	     method: "get", // ’请求方法										
         url:'showOneUser.do',						
	     dataType: "json",					
         dataField : "data",						
         pagination: false,    // 显示页码等信息 						
         showColumns: false,  // 选择显示的列 						
         clickToSelect: false, // ’在点击行时，自动选择rediobox 和 checkbox						
	     sidePagination: 'server',   // ’分页方式：client 客户端分页，server 服务端分页					
	     cache: false, // 不缓存    					
	     queryParams: function queryParams(params){					
				 var param = {		
						 id10001 : row.id10001
						 };  
				 return param;		
			 },			
			// responseHandler: responseHandler,    // ’格式化数据			
	columns: [					
	             {					
	                 title: '用户编号',					
	                 field: 'id10001',					
	                 align: 'center',         					
	             }, 					
	             {					
	                 title: '姓名',					
	                 field: 'na10001',					
	                 align: 'center',    					
	             },					
	              {					
	                  title: '所在部门',					
	                  field: 'na10003',					
	                  align: 'center',					
	              }, 					
	             {					
	                  title: '职务',					
	                  field: 'na10004',					
	                  align: 'center',					
	              },					
	             {					
	                  title: '联系地址',					
	                  field: 'na10005',					
	                  align: 'center',					
	              }

	         ]					
	   });					
	};					

</script>
</head>
<body>
<div class="panel panel-default">
<div class="panel-body table-responsive">
        　　　　　　
     <table class="table table-striped table-bordered table-hover" id="tableL01" data-row-style="rowStyle">
     <div id="toolbar">
      <div class="query-div"  style="width: 200px">
            <form class="form-inline" role="form" id="query_form">
                
                <div class="form-group query-form-group">
                        姓名<input type="text" name="Name" id="name">
                    <button type="button" class="btn btn-default" id="with_query" onclick="tableInit()">查询</button>
                </div>
                <div class="form-group query-form-group">
                <label for="shuju">导出数据：</label>
                <select class="form-control" id="with_appr_shuju">
                <option value="basic">当前页面数据导出</option>
                <option value="selected">选中数据导出</option>
                </select>
                </div>
            </form>
        </div>
 
</div>
        </table>   
    </div>
</div>
 
</body>
</html>




package controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import entity.User1;
import service.PM00001Service;

@Controller

public class ShowTable {
	@Autowired
	PM00001Service userService;

	@ResponseBody
	@RequestMapping("listUser")
	public Map<String, Object> listUser(
			@RequestParam(value = "offset", defaultValue = "-1", required = false) int offset,
			@RequestParam(value = "limit", defaultValue = "-1", required = false) int limit, User1 user1, String sort,
			String sortOrder) {
		int count = userService.searchCount(user1);
		Map<String, Object> queryMap = new HashMap<String, Object>();
		if (offset != -1) {
			if (offset != 0) {
				offset = offset + 1;
				limit = offset + limit - 1;
				queryMap.put("offset", offset);
				queryMap.put("limit", limit);
			} else {
				limit = offset + limit;
				queryMap.put("offset", offset);
				queryMap.put("limit", limit);
			}
		} else {
			queryMap.put("offset", 0);
			queryMap.put("limit", count);
		}
		queryMap.put("sort", sort);
		queryMap.put("sortOrder", sortOrder);
		queryMap.put("user1", user1);
		List<User1> list = userService.listUser(queryMap);
		Map<String, Object> map = new HashMap<>();
		map.put("total", count);
		map.put("rows", list);
		return map;

	}

	@RequestMapping("showUpdateUser")
	public ModelAndView showUpdateUser(Integer id10001) {
		ModelAndView mv = new ModelAndView("OnPerson_changePerson");
		// ’更新user1
		User1 user1 = userService.showUpdateUser(id10001);
		mv.addObject("user1", user1);
		return mv;

	}

	@ResponseBody
	@RequestMapping("showOneUser")
	public Map<String, Object> showOneUser(Integer id10001) {
		Map<String, Object> map = new HashMap<>();
		System.out.println(id10001);
		List<User1> list = userService.showOneUser(id10001);
		map.put("data", list);
		return map;

	}
}




package service.impl;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import dao.PM00001Dao;
import entity.User1;
import service.PM00001Service;

@Service
public class PM00001ServiceImpl implements PM00001Service {
	@Autowired
	PM00001Dao PM00001Dao;

	@Override
	public List<User1> listUser(Map<String, Object> queryMap) {
		List<User1> list = PM00001Dao.listUser(queryMap);
		return list;
	}

	@Override
	public List<User1> showOneUser(Integer ID10001) {
		List<User1> list = PM00001Dao.showOneUser(ID10001);
		return list;
	}

}


package dao;

import java.util.List;
import java.util.Map;

import entity.User1;

public interface PM00001Dao {
	List<User1> listUser(Map<String, Object> queryMap);

	List<User1> showOneUser(Integer id10001);
}


<mapper namespace="dao.PM00001Dao">


	
	<select id="listUser" resultMap="user1" parameterType="java.util.Map">
		select 
		    ID10001,
		    NA10001,
		    NA10003,
		    NA10004,
		    NA10005 
		from
		    (
		     select 
		         ID10001,
		         NA10001,
		         NA10003,
		         NA10004,
		         NA10005,
		     rownum AS RQ 
		     from 
		          (select 
		               ID10001,
		               NA10001,
		               NA10003,
		               NA10004,
		               NA10005 
		               from user1 
		               order by ${sort}  ${sortOrder}) 
		     where 
		         1=1 
		         <if test="user1.na10001!=null and user1.na10001!=''">
			      and NA10001 like '%${user1.na10001}%'
		        </if>
		)
		where 
		    RQ between #{offset} and #{limit}
	</select>
	
	<select id="showOneUser" resultMap="user1">
	select
	    ID10001,
	    PW10001,
	    NA10001,
	    CD10002,
	    NA10003,
	    NA10004,
	    NO10001,
	    NA10005,
	    IMAGEURL
	 from
	     user1
	 where 
	     ID10001=#{id10001}
	</select>
